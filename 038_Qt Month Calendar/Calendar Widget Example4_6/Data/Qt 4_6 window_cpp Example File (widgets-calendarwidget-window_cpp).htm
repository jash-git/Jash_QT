<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0069)http://doc.trolltech.com/4.6.2/widgets-calendarwidget-window-cpp.html -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Qt 4.6: window.cpp Example File (widgets/calendarwidget/window.cpp)</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css 
href="Qt%204_6%20window_cpp%20Example%20File%20(widgets-calendarwidget-window_cpp).files/classic.css">
<META name=GENERATOR content="MSHTML 8.00.6001.19019"></HEAD>
<BODY>
<TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD vAlign=top width=32 align=left><A href="http://qt.nokia.com/"><IMG 
      border=0 align=left 
      src="Qt%204_6%20window_cpp%20Example%20File%20(widgets-calendarwidget-window_cpp).files/qt-logo.png"></A></TD>
    <TD width=1>&nbsp;&nbsp;</TD>
    <TD class=postheader vAlign=center><A 
      href="http://doc.trolltech.com/4.6.2/index.html"><FONT 
      color=#004faf>Home</FONT></A>&nbsp;· <A 
      href="http://doc.trolltech.com/4.6.2/classes.html"><FONT 
      color=#004faf>All&nbsp;Classes</FONT></A>&nbsp;· <A 
      href="http://doc.trolltech.com/4.6.2/functions.html"><FONT 
      color=#004faf>All&nbsp;Functions</FONT></A>&nbsp;· <A 
      href="http://doc.trolltech.com/4.6.2/overviews.html"><FONT 
      color=#004faf>Overviews</FONT></A></TD></TR></TBODY></TABLE>
<H1 class=title>window.cpp Example File<BR><SPAN 
class=small-subtitle>widgets/calendarwidget/window.cpp</SPAN> </H1><PRE><SPAN class=comment> /****************************************************************************
 **
 ** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 ** All rights reserved.
 ** Contact: Nokia Corporation (qt-info@nokia.com)
 **
 ** This file is part of the examples of the Qt Toolkit.
 **
 ** $QT_BEGIN_LICENSE:LGPL$
 ** Commercial Usage
 ** Licensees holding valid Qt Commercial licenses may use this file in
 ** accordance with the Qt Commercial License Agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
 ** a written agreement between you and Nokia.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
 ** General Public License version 2.1 as published by the Free Software
 ** Foundation and appearing in the file LICENSE.LGPL included in the
 ** packaging of this file.  Please review the following information to
 ** ensure the GNU Lesser General Public License version 2.1 requirements
 ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, Nokia gives you certain additional
 ** rights.  These rights are described in the Nokia Qt LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
 ** GNU General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU
 ** General Public License version 3.0 as published by the Free Software
 ** Foundation and appearing in the file LICENSE.GPL included in the
 ** packaging of this file.  Please review the following information to
 ** ensure the GNU General Public License version 3.0 requirements will be
 ** met: http://www.gnu.org/copyleft/gpl.html.
 **
 ** If you have questions regarding the use of this file, please contact
 ** Nokia at qt-info@nokia.com.
 ** $QT_END_LICENSE$
 **
 ****************************************************************************/</SPAN>

 #include &lt;QtGui&gt;

 #include "window.h"

 Window::Window()
 {
     createPreviewGroupBox();
     createGeneralOptionsGroupBox();
     createDatesGroupBox();
     createTextFormatsGroupBox();

     QGridLayout *layout = new QGridLayout;
     layout-&gt;addWidget(previewGroupBox, 0, 0);
     layout-&gt;addWidget(generalOptionsGroupBox, 0, 1);
     layout-&gt;addWidget(datesGroupBox, 1, 0);
     layout-&gt;addWidget(textFormatsGroupBox, 1, 1);
     layout-&gt;setSizeConstraint(QLayout::SetFixedSize);
     setLayout(layout);

     previewLayout-&gt;setRowMinimumHeight(0, calendar-&gt;sizeHint().height());
     previewLayout-&gt;setColumnMinimumWidth(0, calendar-&gt;sizeHint().width());

     setWindowTitle(tr("Calendar Widget"));
 }

 void Window::localeChanged(int index)
 {
     calendar-&gt;setLocale(localeCombo-&gt;itemData(index).toLocale());
 }

 void Window::firstDayChanged(int index)
 {
     calendar-&gt;setFirstDayOfWeek(Qt::DayOfWeek(
                                 firstDayCombo-&gt;itemData(index).toInt()));
 }

 void Window::selectionModeChanged(int index)
 {
     calendar-&gt;setSelectionMode(QCalendarWidget::SelectionMode(
                                selectionModeCombo-&gt;itemData(index).toInt()));
 }

 void Window::horizontalHeaderChanged(int index)
 {
     calendar-&gt;setHorizontalHeaderFormat(QCalendarWidget::HorizontalHeaderFormat(
         horizontalHeaderCombo-&gt;itemData(index).toInt()));
 }

 void Window::verticalHeaderChanged(int index)
 {
     calendar-&gt;setVerticalHeaderFormat(QCalendarWidget::VerticalHeaderFormat(
         verticalHeaderCombo-&gt;itemData(index).toInt()));
 }

 void Window::selectedDateChanged()
 {
     currentDateEdit-&gt;setDate(calendar-&gt;selectedDate());
 }

 void Window::minimumDateChanged(const QDate &amp;date)
 {
     calendar-&gt;setMinimumDate(date);
     maximumDateEdit-&gt;setDate(calendar-&gt;maximumDate());
 }

 void Window::maximumDateChanged(const QDate &amp;date)
 {
     calendar-&gt;setMaximumDate(date);
     minimumDateEdit-&gt;setDate(calendar-&gt;minimumDate());
 }

 void Window::weekdayFormatChanged()
 {
     QTextCharFormat format;

     format.setForeground(qvariant_cast&lt;QColor&gt;(
         weekdayColorCombo-&gt;itemData(weekdayColorCombo-&gt;currentIndex())));
     calendar-&gt;setWeekdayTextFormat(Qt::Monday, format);
     calendar-&gt;setWeekdayTextFormat(Qt::Tuesday, format);
     calendar-&gt;setWeekdayTextFormat(Qt::Wednesday, format);
     calendar-&gt;setWeekdayTextFormat(Qt::Thursday, format);
     calendar-&gt;setWeekdayTextFormat(Qt::Friday, format);
 }

 void Window::weekendFormatChanged()
 {
     QTextCharFormat format;

     format.setForeground(qvariant_cast&lt;QColor&gt;(
         weekendColorCombo-&gt;itemData(weekendColorCombo-&gt;currentIndex())));
     calendar-&gt;setWeekdayTextFormat(Qt::Saturday, format);
     calendar-&gt;setWeekdayTextFormat(Qt::Sunday, format);
 }

 void Window::reformatHeaders()
 {
     QString text = headerTextFormatCombo-&gt;currentText();
     QTextCharFormat format;

     if (text == tr("Bold")) {
         format.setFontWeight(QFont::Bold);
     } else if (text == tr("Italic")) {
         format.setFontItalic(true);
     } else if (text == tr("Green")) {
         format.setForeground(Qt::green);
     }
     calendar-&gt;setHeaderTextFormat(format);
 }

 void Window::reformatCalendarPage()
 {
     if (firstFridayCheckBox-&gt;isChecked()) {
         QDate firstFriday(calendar-&gt;yearShown(), calendar-&gt;monthShown(), 1);
         while (firstFriday.dayOfWeek() != Qt::Friday)
             firstFriday = firstFriday.addDays(1);
         QTextCharFormat firstFridayFormat;
         firstFridayFormat.setForeground(Qt::blue);
         calendar-&gt;setDateTextFormat(firstFriday, firstFridayFormat);
     }

     <SPAN class=comment>//May First in Red takes precedence</SPAN>
     if (mayFirstCheckBox-&gt;isChecked()) {
         const QDate mayFirst(calendar-&gt;yearShown(), 5, 1);
         QTextCharFormat mayFirstFormat;
         mayFirstFormat.setForeground(Qt::red);
         calendar-&gt;setDateTextFormat(mayFirst, mayFirstFormat);
     }
 }

 void Window::createPreviewGroupBox()
 {
     previewGroupBox = new QGroupBox(tr("Preview"));

     calendar = new QCalendarWidget;
     calendar-&gt;setMinimumDate(QDate(1900, 1, 1));
     calendar-&gt;setMaximumDate(QDate(3000, 1, 1));
     calendar-&gt;setGridVisible(true);

     connect(calendar, SIGNAL(currentPageChanged(int,int)),
             this, SLOT(reformatCalendarPage()));

     previewLayout = new QGridLayout;
     previewLayout-&gt;addWidget(calendar, 0, 0, Qt::AlignCenter);
     previewGroupBox-&gt;setLayout(previewLayout);
 }

 void Window::createGeneralOptionsGroupBox()
 {
     generalOptionsGroupBox = new QGroupBox(tr("General Options"));

     localeCombo = new QComboBox;
     int curLocaleIndex = -1;
     int index = 0;
     for (int _lang = QLocale::C; _lang &lt;= QLocale::LastLanguage; ++_lang) {
         QLocale::Language lang = static_cast&lt;QLocale::Language&gt;(_lang);
         QList&lt;QLocale::Country&gt; countries = QLocale::countriesForLanguage(lang);
         for (int i = 0; i &lt; countries.count(); ++i) {
             QLocale::Country country = countries.at(i);
             QString label = QLocale::languageToString(lang);
             label += QLatin1Char('/');
             label += QLocale::countryToString(country);
             QLocale locale(lang, country);
             if (this-&gt;locale().language() == lang &amp;&amp; this-&gt;locale().country() == country)
                 curLocaleIndex = index;
             localeCombo-&gt;addItem(label, locale);
             ++index;
         }
     }
     if (curLocaleIndex != -1)
         localeCombo-&gt;setCurrentIndex(curLocaleIndex);
     localeLabel = new QLabel(tr("&amp;Locale"));
     localeLabel-&gt;setBuddy(localeCombo);

     firstDayCombo = new QComboBox;
     firstDayCombo-&gt;addItem(tr("Sunday"), Qt::Sunday);
     firstDayCombo-&gt;addItem(tr("Monday"), Qt::Monday);
     firstDayCombo-&gt;addItem(tr("Tuesday"), Qt::Tuesday);
     firstDayCombo-&gt;addItem(tr("Wednesday"), Qt::Wednesday);
     firstDayCombo-&gt;addItem(tr("Thursday"), Qt::Thursday);
     firstDayCombo-&gt;addItem(tr("Friday"), Qt::Friday);
     firstDayCombo-&gt;addItem(tr("Saturday"), Qt::Saturday);

     firstDayLabel = new QLabel(tr("Wee&amp;k starts on:"));
     firstDayLabel-&gt;setBuddy(firstDayCombo);

     selectionModeCombo = new QComboBox;
     selectionModeCombo-&gt;addItem(tr("Single selection"),
                                 QCalendarWidget::SingleSelection);
     selectionModeCombo-&gt;addItem(tr("None"), QCalendarWidget::NoSelection);

     selectionModeLabel = new QLabel(tr("&amp;Selection mode:"));
     selectionModeLabel-&gt;setBuddy(selectionModeCombo);

     gridCheckBox = new QCheckBox(tr("&amp;Grid"));
     gridCheckBox-&gt;setChecked(calendar-&gt;isGridVisible());

     navigationCheckBox = new QCheckBox(tr("&amp;Navigation bar"));
     navigationCheckBox-&gt;setChecked(true);

     horizontalHeaderCombo = new QComboBox;
     horizontalHeaderCombo-&gt;addItem(tr("Single letter day names"),
                                    QCalendarWidget::SingleLetterDayNames);
     horizontalHeaderCombo-&gt;addItem(tr("Short day names"),
                                    QCalendarWidget::ShortDayNames);
     horizontalHeaderCombo-&gt;addItem(tr("None"),
                                    QCalendarWidget::NoHorizontalHeader);
     horizontalHeaderCombo-&gt;setCurrentIndex(1);

     horizontalHeaderLabel = new QLabel(tr("&amp;Horizontal header:"));
     horizontalHeaderLabel-&gt;setBuddy(horizontalHeaderCombo);

     verticalHeaderCombo = new QComboBox;
     verticalHeaderCombo-&gt;addItem(tr("ISO week numbers"),
                                  QCalendarWidget::ISOWeekNumbers);
     verticalHeaderCombo-&gt;addItem(tr("None"), QCalendarWidget::NoVerticalHeader);

     verticalHeaderLabel = new QLabel(tr("&amp;Vertical header:"));
     verticalHeaderLabel-&gt;setBuddy(verticalHeaderCombo);

     connect(localeCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(localeChanged(int)));
     connect(firstDayCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(firstDayChanged(int)));
     connect(selectionModeCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(selectionModeChanged(int)));
     connect(gridCheckBox, SIGNAL(toggled(bool)),
             calendar, SLOT(setGridVisible(bool)));
     connect(navigationCheckBox, SIGNAL(toggled(bool)),
             calendar, SLOT(setNavigationBarVisible(bool)));
     connect(horizontalHeaderCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(horizontalHeaderChanged(int)));
     connect(verticalHeaderCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(verticalHeaderChanged(int)));

     QHBoxLayout *checkBoxLayout = new QHBoxLayout;
     checkBoxLayout-&gt;addWidget(gridCheckBox);
     checkBoxLayout-&gt;addStretch();
     checkBoxLayout-&gt;addWidget(navigationCheckBox);

     QGridLayout *outerLayout = new QGridLayout;
     outerLayout-&gt;addWidget(localeLabel, 0, 0);
     outerLayout-&gt;addWidget(localeCombo, 0, 1);
     outerLayout-&gt;addWidget(firstDayLabel, 1, 0);
     outerLayout-&gt;addWidget(firstDayCombo, 1, 1);
     outerLayout-&gt;addWidget(selectionModeLabel, 2, 0);
     outerLayout-&gt;addWidget(selectionModeCombo, 2, 1);
     outerLayout-&gt;addLayout(checkBoxLayout, 3, 0, 1, 2);
     outerLayout-&gt;addWidget(horizontalHeaderLabel, 4, 0);
     outerLayout-&gt;addWidget(horizontalHeaderCombo, 4, 1);
     outerLayout-&gt;addWidget(verticalHeaderLabel, 5, 0);
     outerLayout-&gt;addWidget(verticalHeaderCombo, 5, 1);
     generalOptionsGroupBox-&gt;setLayout(outerLayout);

     firstDayChanged(firstDayCombo-&gt;currentIndex());
     selectionModeChanged(selectionModeCombo-&gt;currentIndex());
     horizontalHeaderChanged(horizontalHeaderCombo-&gt;currentIndex());
     verticalHeaderChanged(verticalHeaderCombo-&gt;currentIndex());
 }

 void Window::createDatesGroupBox()
 {
     datesGroupBox = new QGroupBox(tr("Dates"));

     minimumDateEdit = new QDateEdit;
     minimumDateEdit-&gt;setDisplayFormat("MMM d yyyy");
     minimumDateEdit-&gt;setDateRange(calendar-&gt;minimumDate(),
                                   calendar-&gt;maximumDate());
     minimumDateEdit-&gt;setDate(calendar-&gt;minimumDate());

     minimumDateLabel = new QLabel(tr("&amp;Minimum Date:"));
     minimumDateLabel-&gt;setBuddy(minimumDateEdit);

     currentDateEdit = new QDateEdit;
     currentDateEdit-&gt;setDisplayFormat("MMM d yyyy");
     currentDateEdit-&gt;setDate(calendar-&gt;selectedDate());
     currentDateEdit-&gt;setDateRange(calendar-&gt;minimumDate(),
                                   calendar-&gt;maximumDate());

     currentDateLabel = new QLabel(tr("&amp;Current Date:"));
     currentDateLabel-&gt;setBuddy(currentDateEdit);

     maximumDateEdit = new QDateEdit;
     maximumDateEdit-&gt;setDisplayFormat("MMM d yyyy");
     maximumDateEdit-&gt;setDateRange(calendar-&gt;minimumDate(),
                                   calendar-&gt;maximumDate());
     maximumDateEdit-&gt;setDate(calendar-&gt;maximumDate());

     maximumDateLabel = new QLabel(tr("Ma&amp;ximum Date:"));
     maximumDateLabel-&gt;setBuddy(maximumDateEdit);

     connect(currentDateEdit, SIGNAL(dateChanged(QDate)),
             calendar, SLOT(setSelectedDate(QDate)));
     connect(calendar, SIGNAL(selectionChanged()),
             this, SLOT(selectedDateChanged()));
     connect(minimumDateEdit, SIGNAL(dateChanged(QDate)),
             this, SLOT(minimumDateChanged(QDate)));
     connect(maximumDateEdit, SIGNAL(dateChanged(QDate)),
             this, SLOT(maximumDateChanged(QDate)));

     QGridLayout *dateBoxLayout = new QGridLayout;
     dateBoxLayout-&gt;addWidget(currentDateLabel, 1, 0);
     dateBoxLayout-&gt;addWidget(currentDateEdit, 1, 1);
     dateBoxLayout-&gt;addWidget(minimumDateLabel, 0, 0);
     dateBoxLayout-&gt;addWidget(minimumDateEdit, 0, 1);
     dateBoxLayout-&gt;addWidget(maximumDateLabel, 2, 0);
     dateBoxLayout-&gt;addWidget(maximumDateEdit, 2, 1);
     dateBoxLayout-&gt;setRowStretch(3, 1);

     datesGroupBox-&gt;setLayout(dateBoxLayout);
 }

 void Window::createTextFormatsGroupBox()
 {
     textFormatsGroupBox = new QGroupBox(tr("Text Formats"));

     weekdayColorCombo = createColorComboBox();
     weekdayColorCombo-&gt;setCurrentIndex(
             weekdayColorCombo-&gt;findText(tr("Black")));

     weekdayColorLabel = new QLabel(tr("&amp;Weekday color:"));
     weekdayColorLabel-&gt;setBuddy(weekdayColorCombo);

     weekendColorCombo = createColorComboBox();
     weekendColorCombo-&gt;setCurrentIndex(
             weekendColorCombo-&gt;findText(tr("Red")));

     weekendColorLabel = new QLabel(tr("Week&amp;end color:"));
     weekendColorLabel-&gt;setBuddy(weekendColorCombo);

     headerTextFormatCombo = new QComboBox;
     headerTextFormatCombo-&gt;addItem(tr("Bold"));
     headerTextFormatCombo-&gt;addItem(tr("Italic"));
     headerTextFormatCombo-&gt;addItem(tr("Plain"));

     headerTextFormatLabel = new QLabel(tr("&amp;Header text:"));
     headerTextFormatLabel-&gt;setBuddy(headerTextFormatCombo);

     firstFridayCheckBox = new QCheckBox(tr("&amp;First Friday in blue"));

     mayFirstCheckBox = new QCheckBox(tr("May &amp;1 in red"));

     connect(weekdayColorCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(weekdayFormatChanged()));
     connect(weekendColorCombo, SIGNAL(currentIndexChanged(int)),
             this, SLOT(weekendFormatChanged()));
     connect(headerTextFormatCombo, SIGNAL(currentIndexChanged(QString)),
             this, SLOT(reformatHeaders()));
     connect(firstFridayCheckBox, SIGNAL(toggled(bool)),
             this, SLOT(reformatCalendarPage()));
     connect(mayFirstCheckBox, SIGNAL(toggled(bool)),
             this, SLOT(reformatCalendarPage()));

     QHBoxLayout *checkBoxLayout = new QHBoxLayout;
     checkBoxLayout-&gt;addWidget(firstFridayCheckBox);
     checkBoxLayout-&gt;addStretch();
     checkBoxLayout-&gt;addWidget(mayFirstCheckBox);

     QGridLayout *outerLayout = new QGridLayout;
     outerLayout-&gt;addWidget(weekdayColorLabel, 0, 0);
     outerLayout-&gt;addWidget(weekdayColorCombo, 0, 1);
     outerLayout-&gt;addWidget(weekendColorLabel, 1, 0);
     outerLayout-&gt;addWidget(weekendColorCombo, 1, 1);
     outerLayout-&gt;addWidget(headerTextFormatLabel, 2, 0);
     outerLayout-&gt;addWidget(headerTextFormatCombo, 2, 1);
     outerLayout-&gt;addLayout(checkBoxLayout, 3, 0, 1, 2);
     textFormatsGroupBox-&gt;setLayout(outerLayout);

     weekdayFormatChanged();
     weekendFormatChanged();
     reformatHeaders();
     reformatCalendarPage();
 }

 QComboBox *Window::createColorComboBox()
 {
     QComboBox *comboBox = new QComboBox;
     comboBox-&gt;addItem(tr("Red"), Qt::red);
     comboBox-&gt;addItem(tr("Blue"), Qt::blue);
     comboBox-&gt;addItem(tr("Black"), Qt::black);
     comboBox-&gt;addItem(tr("Magenta"), Qt::magenta);
     return comboBox;
 }</PRE>
<P>
<ADDRESS>
<HR>

<DIV align=center>
<TABLE border=0 cellSpacing=0 width="100%">
  <TBODY>
  <TR class=address>
    <TD width="40%" align=left>Copyright © 2010 Nokia Corporation and/or its 
      subsidiary(-ies)</TD>
    <TD width="20%" align=middle><A 
      href="http://doc.trolltech.com/4.6.2/trademarks.html">Trademarks</A></TD>
    <TD width="40%" align=right>
      <DIV align=right>Qt 
4.6.2</DIV></TD></TR></TBODY></TABLE></DIV></ADDRESS></BODY></HTML>
